{"mappings":"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","sources":["src/js/source/utils.js","src/js/source/input-field.js","src/js/source/game-field.js","src/js/source/pop-up.js","src/js/app.js"],"sourcesContent":["export function dispatchEvent(e, data) {\n  const customEvent = new CustomEvent(e, { detail: data, bubbles: true });\n  window.dispatchEvent(customEvent);\n}\n","/*============================================================================\n  InputField\n==============================================================================*/\n\nimport { dispatchEvent } from './utils.js';\n\nclass InputField extends HTMLElement {\n  constructor() {\n    super();\n    this.buttons = this.querySelectorAll('button');\n    this.inputs = this.querySelectorAll('[data-input]');\n    this.reset = this.querySelector('[data-reset]');\n    this.submit = this.querySelector('[data-submit]');\n\n\n    this.inputs.forEach(input => {\n      const inputValue = input.dataset.input;\n      this.inputClicked(inputValue);\n      input.addEventListener('click', () => {\n        this.inputClicked(inputValue);\n      });\n    });\n\n    this.reset.addEventListener('click', () => {\n      dispatchEvent('reset:clicked');\n    });\n\n    this.submit.addEventListener('click', () => {\n      dispatchEvent('submit:clicked');\n    });\n\n    //set up click event for key 1-6\n    window.addEventListener('keydown', e => {\n      // 1 thru 6\n      if (e.key >= 1 && e.key <= 6) {\n        this.inputClicked(e.key);\n      }\n\n      // Submit\n      if (e.key === 'Enter') {\n        dispatchEvent('submit:clicked');\n      }\n\n      // Reset\n      if (e.key === 'Backspace') {\n        dispatchEvent('reset:clicked');\n      }\n    });\n\n    //listen for inputs:disable event\n    window.addEventListener('inputs:disable', () => {\n      this.disableInputs();\n    });\n\n    //listen for inputs:enable event\n    window.addEventListener('inputs:enable', () => {\n      this.enableInputs();\n    });\n  }\n\n  inputClicked(value) {\n    dispatchEvent('input:clicked', value);\n  }\n\n  disableInputs() {\n    this.buttons.forEach(input => {\n      // set disabled attribute\n      input.setAttribute('disabled', true);\n    });\n  }\n\n  enableInputs() {\n    this.buttons.forEach(input => {\n      // remove disabled attribute\n      input.removeAttribute('disabled');\n    });\n  }\n}\n\ncustomElements.define('input-field', InputField);\n","/*============================================================================\n  GameField\n==============================================================================*/\n\nimport { dispatchEvent } from './utils.js';\n\nclass GameField extends HTMLElement {\n  constructor() {\n    super();\n    this.currentArray = [];\n    this.historyArray = [];\n    this.answerArray = [];\n    this.currentTurn = 1;\n\n    this.init();\n  }\n\n  init() {\n    //generate answer array, 6 random numbers between 1 and 6\n    for (let i = 0; i < 4; i++) {\n      this.answerArray.push(Math.floor(Math.random() * 6) + 1);\n    }\n\n    console.log(this.answerArray);\n\n    window.addEventListener('input:clicked', e => {\n      // Add input to current array and display it in this.current, ensure array has a max size of 6\n      if (this.currentArray.length >= 4) this.currentArray.shift();\n      this.currentArray.push(e.detail);\n\n      this.displayArray(this.currentArray, this.querySelector(`[data-field=\"${this.currentTurn}\"]`));\n    });\n\n    window.addEventListener('reset:clicked', () => {\n      this.currentArray = [];\n      this.querySelector(`[data-field=\"${this.currentTurn}\"]`).innerHTML = '';\n    });\n\n    window.addEventListener('submit:clicked', () => {\n      if (this.currentArray.length < 4) return;\n\n      // Add current array to history array\n      this.historyArray.push(this.currentArray);\n\n      this.displayArray(this.currentArray, this.querySelector(`[data-field=\"${this.currentTurn}\"]`));\n      this.querySelector(`[data-field=\"${this.currentTurn}\"]`).classList.remove('active');\n\n      // Check if current array is correct\n      this.winHandler();\n\n      // Reset current array\n      this.currentArray = [];\n      this.currentTurn+= 1;\n\n\n      // Check for loss\n      if (this.currentTurn == 7) {\n        dispatchEvent('game:lose');\n        return;\n      }\n\n      // set new active field\n      this.querySelector(`[data-field=\"${this.currentTurn}\"]`).classList.add('active');\n    });\n  }\n\n  inputClicked(value) {\n    dispatchEvent('input:clicked', value);\n  }\n\n  displayArray(array, target) {\n    // Clear current field\n    target.innerHTML = '';\n\n    array.forEach(input => {\n      const span = document.createElement('span');\n      span.classList.add('input', `input--${input}`);\n      target.appendChild(span);\n    });\n  }\n\n  winHandler() {\n    let correct = 0;\n    const guessArray = this.currentArray;\n    const solutionArray = this.answerArray;\n    const currentField = this.querySelector(`[data-field=\"${this.currentTurn}\"]`);\n\n    for(let i=0; i < guessArray.length; i++){\n      if(guessArray[i] == solutionArray[i]){\n        correct += 1;\n        currentField.children[i].classList.add('input--correct');\n\n        if(correct === 4) {\n          dispatchEvent('game:win');\n          return;\n        }\n      } else if (solutionArray.indexOf(guessArray[i]) != (-1)) {\n        currentField.children[i].classList.add('input--close');\n      } else{\n        currentField.children[i].classList.add('input--wrong');\n      }\n    }\n  }\n}\n\ncustomElements.define('game-field', GameField);\n","/*============================================================================\n  PopUp\n==============================================================================*/\n\nimport { dispatchEvent } from './utils.js';\n\nclass PopUp extends HTMLElement {\n  constructor() {\n    super();\n    this.button = this.querySelector('button');\n    this.popupScreen = this.querySelectorAll('.popup-screen');\n\n    this.button.addEventListener('click', () => {\n      this.classList.add('hidden');\n      dispatchEvent('inputs:enable');\n    });\n\n    //listen for game:win and game:lost event\n    window.addEventListener('game:win', () => {\n      this.displayScreen('win');\n      dispatchEvent('inputs:disable');\n    });\n\n    window.addEventListener('game:lose', () => {\n      this.displayScreen('lose');\n      dispatchEvent('inputs:disable');\n    });\n  }\n\n  displayScreen(context) {\n    this.classList.remove('hidden');\n    // Loop through popupScreen and set hidden class\n    this.popupScreen.forEach(screen => {\n      if (screen.dataset.context === context) {\n        screen.classList.remove('hidden');\n      } else {\n        screen.classList.add('hidden');\n      }\n    });\n  }\n}\n\ncustomElements.define('pop-up', PopUp);\n","\nimport InputField from './source/input-field.js';\nimport GameField from './source/game-field.js';\nimport PopUp from './source/pop-up.js';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n});\n"],"names":["$9e9ba9099d19ad1f$export$716a11175c03fb4e","e","data","customEvent","CustomEvent","detail","bubbles","window","dispatchEvent","$f12c5a43f062f1e4$var$InputField","HTMLElement","constructor","super","this","buttons","querySelectorAll","inputs","reset","querySelector","submit","forEach","input","inputValue","dataset","inputClicked","addEventListener","key","disableInputs","enableInputs","value","setAttribute","removeAttribute","customElements","define","$46a3384ea96d24d2$var$GameField","currentArray","historyArray","answerArray","currentTurn","init","i","push","Math","floor","random","console","log","length","shift","displayArray","innerHTML","classList","remove","winHandler","add","array","target","span","document","createElement","appendChild","correct","guessArray","solutionArray","currentField","children","indexOf","$5617c31fa8c108c9$var$PopUp","button","popupScreen","displayScreen","context","screen"],"version":3,"file":"index.5b63c92e.js.map"}